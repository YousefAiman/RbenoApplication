package com.example.yousef.rbenoapplication;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.graphics.Point;import android.graphics.drawable.ColorDrawable;import android.net.ConnectivityManager;import android.net.Network;import android.net.NetworkCapabilities;import android.os.Build;import android.os.Bundle;import android.text.Layout;import android.text.SpannableString;import android.text.style.AlignmentSpan;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.SearchView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.core.content.ContextCompat;import androidx.core.view.GravityCompat;import androidx.drawerlayout.widget.DrawerLayout;import androidx.fragment.app.DialogFragment;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentManager;import androidx.viewpager.widget.ViewPager;import com.facebook.AccessToken;import com.facebook.login.LoginManager;import com.google.android.gms.ads.MobileAds;import com.google.android.material.badge.BadgeDrawable;import com.google.android.material.bottomnavigation.BottomNavigationView;import com.google.android.material.bottomsheet.BottomSheetDialog;import com.google.android.material.navigation.NavigationView;import com.google.android.material.tabs.TabLayout;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.firestore.CollectionReference;import com.google.firebase.firestore.DocumentChange;import com.google.firebase.firestore.DocumentSnapshot;import com.google.firebase.firestore.EventListener;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.firestore.FirebaseFirestoreException;import com.google.firebase.firestore.Query;import com.google.firebase.firestore.QueryDocumentSnapshot;import com.google.firebase.firestore.QuerySnapshot;import com.squareup.picasso.Picasso;import java.util.ArrayList;import java.util.List;public class HomeActivity extends AppCompatActivity {    public DocumentSnapshot documentSnapshot;    public ViewPager viewPager;    FirebaseAuth auth;    DrawerLayout drawerLayout;    FirebaseFirestore firestore;    String imageUrl, userName;    NavigationView navigation;    BottomNavigationView bottomNavigationView;    FrameLayout homeContainer;    FragmentManager fragmentManager;    FirebaseUser user;    List<Bundle> bundles = new ArrayList<>();    int messagesCount = 0;    NewestPromosFragment newestPromosFragment;    ConnectivityManager cm;    ConnectivityManager.NetworkCallback networkCallback;    TabLayout tabLayout;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_home);        firestore = FirebaseFirestore.getInstance();        fragmentManager = getSupportFragmentManager();        auth = FirebaseAuth.getInstance();//        Intent getIntent = getIntent();        user = auth.getCurrentUser();//        if (isGuest()) {//            country = getIntent().getStringExtra("country");//            currency = getIntent().getStringExtra("currency");//        }        viewPager = findViewById(R.id.viewPager);        navigation = findViewById(R.id.homenavigation);        SearchView searchView = findViewById(R.id.searchView);        bottomNavigationView = findViewById(R.id.bottomNavigationView);        homeContainer = findViewById(R.id.homeFragmentContainer);        drawerLayout = findViewById(R.id.homedrawer);        setSupportActionBar(findViewById(R.id.toolbar1));        MobileAds.initialize(getApplicationContext());        getWindowSize();        initializeConnectionListener();        if (isGuest() || (user != null)) {            findViewById(R.id.filterIcon).setOnClickListener(v -> {                pauseVideoFromNewest();                FilterFragment.newInstance().show(fragmentManager, "filter");//                FilterDialogFragment.newInstance().show(fragmentManager, "filter");            });            bottomNavigationView.setSelectedItemId(R.id.homeNavigationItem);            if (!isGuest()) {                navigation.setNavigationItemSelectedListener(menuItem -> {                    pauseVideoFromNewest();                    drawerLayout.closeDrawer(GravityCompat.START);                    switch (menuItem.getItemId()) {                        case R.id.my_profile:                            homeContainer.setVisibility(View.VISIBLE);                            popAllBackstacks();                            fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, new UserFragment(), "userFragment").addToBackStack("userFragment").commit();                            break;                        case R.id.my_ads:                            homeContainer.setVisibility(View.VISIBLE);                            popAllBackstacks();                            fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, new MyPromotionsFragment(), "myPromotionsFragment").addToBackStack("myPromotionsFragment").commit();                            break;                        case R.id.my_messages:                            if (bottomNavigationView.getSelectedItemId() != R.id.messagesNavigationItem) {                                popAllBackstacks();                                bottomNavigationView.setSelectedItemId(R.id.messagesNavigationItem);                            }                            break;                        case R.id.my_notifications:                            if (bottomNavigationView.getSelectedItemId() != R.id.notificationNavigationItem) {                                popAllBackstacks();                                bottomNavigationView.setSelectedItemId(R.id.notificationNavigationItem);                            }                            break;                        case R.id.my_fav:                            if (bottomNavigationView.getSelectedItemId() != R.id.favouriteNavigationItem) {                                popAllBackstacks();                                bottomNavigationView.setSelectedItemId(R.id.favouriteNavigationItem);                            }                            break;                        case R.id.my_settings:                            homeContainer.setVisibility(View.VISIBLE);                            popAllBackstacks();                            fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, new SettingsFragment(), "settings").addToBackStack("settingsFragment").commit();                            break;                        case R.id.my_guide:                            break;                    }                    return false;                });                new Thread(() -> firestore.collection("users").whereEqualTo("userId", user.getUid()).limit(1).get().addOnSuccessListener(queryDocumentSnapshots -> {                    documentSnapshot = queryDocumentSnapshots.getDocuments().get(0);                    GlobalVariables.setBlockedUsers((List<String>) documentSnapshot.get("usersBlocked"));                    userName = documentSnapshot.getString("username");                    imageUrl = documentSnapshot.getString("imageurl");                    if(GlobalVariables.getCurrency() == null || GlobalVariables.getCurrency().isEmpty()){                        GlobalVariables.setCurrency(documentSnapshot.getString("currency"));                    }                    if(GlobalVariables.getCountry() == null || GlobalVariables.getCountry().isEmpty()){                        GlobalVariables.setCountry(documentSnapshot.getString("country"));                    }                    runOnUiThread(()->((TextView)findViewById(R.id.toolbarTitleTv)).setText("Rbeno-"+GlobalVariables.getCountry()));                    boolean status = documentSnapshot.getBoolean("status");//                                String staticUserName = documentSnapshot.getString("staticusername");                    runOnUiThread(() -> {                        initializeTABS();//                                        ((TextView)findViewById(R.id.toolBarTitleTv)).setText("Rbeno");                        ((TextView) navigation.getHeaderView(0).findViewById(R.id.username)).setText(userName);                        ((TextView) navigation.getHeaderView(0).findViewById(R.id.staticusername)).setText("@" + userName.toLowerCase().trim());                        if (status) {                            ((ImageView) navigation.getHeaderView(0).findViewById(R.id.statusImageView)).setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), R.drawable.green_circle));                        } else {                            ((ImageView) navigation.getHeaderView(0).findViewById(R.id.statusImageView)).setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), R.drawable.red_circle));                        }                        if (imageUrl != null && !imageUrl.isEmpty()) {                            GlobalVariables.setProfileImageUrl(imageUrl);                            Picasso.get().load(imageUrl).fit().centerCrop().into((ImageView) navigation.getHeaderView(0).findViewById(R.id.profile_image));                            Picasso.get().load(imageUrl).fit().centerCrop().into((ImageView) findViewById(R.id.userImageIndicator));                        }                    });                    searchView.setOnClickListener(v -> {                        pauseVideoFromNewest();                        searchView.onActionViewCollapsed();                        homeContainer.setVisibility(View.VISIBLE);                        Bundle bundle = new Bundle();                        bundle.putString("userdocument", documentSnapshot.getId());                        DialogFragment dialogFragment = SearchFragment.newInstance();                        dialogFragment.setArguments(bundle);                        dialogFragment.show(getSupportFragmentManager(), "search");                    });                    searchView.setOnSearchClickListener(v -> {                        searchView.onActionViewCollapsed();                        searchView.performClick();                    });                })).start();                findViewById(R.id.addPromotionBtn2).setOnClickListener(v -> showPromoOptions());                findViewById(R.id.nav_footer_Button).setOnClickListener(v -> {                    if (AccessToken.getCurrentAccessToken() != null) {                        LoginManager.getInstance().logOut();                    }                    auth.signOut();                    Toast.makeText(HomeActivity.this, "تم تسجيل الخروج!", Toast.LENGTH_SHORT).show();                    startActivity(new Intent(HomeActivity.this, WelcomeActivity.class));                });                bottomNavigationView.setOnNavigationItemSelectedListener(menuItem -> {                    pauseVideoFromNewest();                    switch (menuItem.getItemId()) {                        case R.id.homeNavigationItem:                            homeContainer.setVisibility(View.INVISIBLE);                            bundles.clear();                            fragmentManager.popBackStack();                            return true;                        case R.id.favouriteNavigationItem:                            menuItem.setCheckable(true);                            homeContainer.setVisibility(View.VISIBLE);                            popAllBackstacks();                            bundles.clear();                            fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, new favouriteFragment(), "favourite").addToBackStack("favourite").commit();                            return true;                        case R.id.notificationNavigationItem:                            menuItem.setCheckable(true);                            homeContainer.setVisibility(View.VISIBLE);                            popAllBackstacks();                            bundles.clear();                            fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, new NotificationsFragment(), "notification").addToBackStack("notification").commit();                            return true;                        case R.id.add_promo_tv:                            showPromoOptions();                            return false;                        case R.id.messagesNavigationItem:                            homeContainer.setVisibility(View.VISIBLE);                            popAllBackstacks();                            bundles.clear();                            if (fragmentManager.findFragmentByTag("messages") != null) {                                fragmentManager.beginTransaction().remove(fragmentManager.findFragmentByTag("messages")).commit();                            }                            fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, new MessagesFragment(), "messages").addToBackStack("messages").commit();                            menuItem.setCheckable(true);                            return true;                    }                    return false;                });                findViewById(R.id.userImageIndicator).setOnClickListener(v -> showDrawer());                setNotificationBadge();            } else {                drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);                findViewById(R.id.userImageIndicator).setOnClickListener(v -> showSigninDialog());                initializeTABS();                searchView.setOnClickListener(v -> {                    pauseVideoFromNewest();                    SearchFragment.newInstance().show(getSupportFragmentManager(), "search");                });                searchView.setOnSearchClickListener(v -> searchView.performClick());                findViewById(R.id.addPromotionBtn2).setOnClickListener(v -> showSigninDialog());                findViewById(R.id.nav_footer_Button).setOnClickListener(v -> {                    startActivity(new Intent(getApplicationContext(), WelcomeActivity.class));                });                bottomNavigationView.setOnNavigationItemSelectedListener(menuItem -> {                    switch (menuItem.getItemId()) {                        case R.id.homeNavigationItem:                            homeContainer.setVisibility(View.INVISIBLE);                            popAllBackstacks();                            bundles.clear();                            menuItem.setCheckable(true);                            searchView.setClickable(true);                            break;                        case R.id.favouriteNavigationItem:                        case R.id.messagesNavigationItem:                        case R.id.add_promo_tv:                        case R.id.notificationNavigationItem:                            showSigninDialog();                            break;                    }                    return false;                });            }        } else {            auth.signOut();            startActivity(new Intent(getApplicationContext(), WelcomeActivity.class));        }    }    @Override    public void onBackPressed() {        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {            drawerLayout.closeDrawer(GravityCompat.START);        } else {//            SearchFragment search = (SearchFragment) getSupportFragmentManager().findFragmentByTag("search");//            if (search != null && search.isVisible()) {//                fragmentManager.beginTransaction().remove(search);//            } else {            if (homeContainer.getVisibility() == View.VISIBLE) {                String fragmentName = fragmentManager.getBackStackEntryAt(fragmentManager.getBackStackEntryCount() - 1).getName();                if (fragmentName.equals("favourite") || fragmentName.equals("messages") || fragmentName.equals("notification")) {                    fragmentManager.popBackStack();                    bottomNavigationView.setSelectedItemId(R.id.homeNavigationItem);                    Log.d("fragment", "removed bottom nav fragment");                } else if (fragmentName.equals("promoFragment")) {                    if (bundles.size() >= 2) {                        Log.d("fragment", "removed promo fragment");                        PromotionInfoFragment promoFragment = new PromotionInfoFragment();                        promoFragment.setArguments(bundles.get(bundles.size() - 2));                        bundles.remove(bundles.size() - 2);                        fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, promoFragment, "promoFragment").addToBackStack("promoFragment").commit();                    } else if (bundles.size() == 1) {                        Log.d("fragment", "removed last promo fragment");                        bundles.clear();                        fragmentManager.popBackStack(fragmentName, 1);                    }                } else {                    Log.d("fragment", "removed non bottom fragment");                    fragmentManager.popBackStack(fragmentName, 1);                }//                    fragmentManager.popBackStack();//                    if(fragmentManager.getFragments().get(fragmentManager.getFragments().size()-1).getTag().equals("promoFragment")) {//                        if (bundles.size() >= 2) {//                            PromotionInfoFragment promoFragment = new PromotionInfoFragment();//                            promoFragment.setArguments(bundles.get(bundles.size() - 2));//                            bundles.remove(bundles.size() - 2);//                            fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, promoFragment, "promoFragment").commit();//                        } else if (bundles.size() == 1) {//                            bundles.remove(bundles.size() - 1);//                            ((PromotionInfoFragment) fragmentManager.findFragmentByTag("promoFragment")).dismiss();//                        }//                    }else{////                        if(fragmentManager.getFragments().size() > 2) {////                        fragmentManager.popBackStack();//                          fragmentManager.beginTransaction().remove(fragmentManager.getFragments().get(fragmentManager.getFragments().size()-1)).commit();//                            if(fragmentManager.getFragments().size() == 1){//                                bottomNavigationView.setSelectedItemId(R.id.homeNavigationItem);//                            }////                        homeContainer.setVisibility(View.INVISIBLE);////                            fragmentManager.beginTransaction().remove(fragmentManager.getFragments().get(fragmentManager.getFragments().size() - 1));////                        bottomNavigationView.setSelectedItemId(R.id.homeNavigationItem);//                        }else{//                            super.onBackPressed();//                        }//                        }            } else {                if (tabLayout.getSelectedTabPosition() != 5) {                    tabLayout.selectTab(tabLayout.getTabAt(5));                } else {                    if (newestPromosFragment.scrollView.getScrollY() > GlobalVariables.getWindowHeight() / 2) {                        newestPromosFragment.scrollView.smoothScrollTo(0, 0);                        newestPromosFragment.onRefresh();                    } else {                        super.onBackPressed();                    }                }            }//            }        }    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        if (item.getItemId() == android.R.id.home) {            if (drawerLayout.isDrawerOpen(GravityCompat.START)) {                drawerLayout.closeDrawer(GravityCompat.START);            } else {                drawerLayout.openDrawer(GravityCompat.START);            }        }        return super.onOptionsItemSelected(item);    }    public void replacePromoFragment(Fragment fragment) {        homeContainer.setVisibility(View.VISIBLE);        Fragment search = getSupportFragmentManager().findFragmentByTag("search");        Fragment filter = getSupportFragmentManager().findFragmentByTag("filter");        Fragment category = getSupportFragmentManager().findFragmentByTag("category");        if (search != null && search.isVisible() || filter != null && filter.isVisible() || category != null && category.isVisible()) {            DialogFragment dialogFragment = PromotionInfoFragment.newInstance();            dialogFragment.setArguments(fragment.getArguments());            dialogFragment.show(getSupportFragmentManager(), "promoFragment");////        PromotionInfoFragment promotionInfoFragment = PromotionInfoFragment.newInstance();////        promotionInfoFragment.show(getSupportFragmentManager(), "promoFragment");////        promotionInfoFragment.setArguments(fragment.getArguments());////        PromotionInfoFragment newPromoShowFragment = (PromotionInfoFragment) fragment;//          fragmentManager.beginTransaction().show(fragment).commit();        } else {            bundles.add(fragment.getArguments());            fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, fragment, "promoFragment").addToBackStack("promoFragment").commit();        }    }    public void replaceNonPromoFragment(Fragment fragment) {        homeContainer.setVisibility(View.VISIBLE);        fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, fragment, "nonPromo").addToBackStack("fragment").commit();    }    public Boolean isGuest() {        return getIntent().hasExtra("guest");    }    public void showSigninDialog() {        Dialog dialog = new Dialog(this);        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        dialog.setContentView(R.layout.signin_alert_layout);        dialog.findViewById(R.id.alert_close).setOnClickListener(v -> dialog.cancel());        dialog.findViewById(R.id.alert_signin).setOnClickListener(v -> startActivity(new Intent(getApplicationContext(), WelcomeActivity.class)));        dialog.show();    }//    private void tellFragments() {//        List<Fragment> fragments = getSupportFragmentManager().getFragments();//        for (Fragment f : fragments) {//            if (f instanceof PromotionInfoFragment)//                ((PromotionInfoFragment) f).onBackPressed();//        }//    }//    public void unClickableFrameLayout() {//        MessagesFragment messagesFragment = (MessagesFragment) getSupportFragmentManager().findFragmentByTag("messages");//        if (messagesFragment != null) {//            messagesTransaction.remove(messagesFragment);//        }//        bottomNavigationView.setSelectedItemId(R.id.homeNavigationItem);////        homeContainer.setClickable(true);//    }    public void showPromoOptions() {//        DisplayMetrics displaymetrics = new DisplayMetrics();//        getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);//        int height = displaymetrics.heightPixels;//        final float h = (float) (height / (3.5));        final BottomSheetDialog bsd = new BottomSheetDialog(HomeActivity.this);        View parentView = getLayoutInflater().inflate(R.layout.bottomsheetmenu, null);        parentView.findViewById(R.id.imagePromoTv).setOnClickListener(v -> {            startActivityForResult(new Intent(getApplicationContext(), PromotionActivity.class)                    .putExtra("username", userName), 3);            bsd.dismiss();        });        parentView.findViewById(R.id.videoPromoTv).setOnClickListener(v -> {            startActivityForResult(new Intent(getApplicationContext(), PromotionActivity.class)                    .putExtra("username", userName)                    .putExtra("videoPromo", true), 3);            bsd.dismiss();        });        parentView.findViewById(R.id.textPromoTv).setOnClickListener(v -> {            startActivityForResult(new Intent(getApplicationContext(), PromotionActivity.class)                    .putExtra("username", userName)                    .putExtra("textPromo", true), 3);            bsd.dismiss();        });        bsd.setContentView(parentView);        bsd.show();    }    public void setNotificationBadge() {        BadgeDrawable notificationBadge = bottomNavigationView.getOrCreateBadge(R.id.notificationNavigationItem);        BadgeDrawable messagingBadge = bottomNavigationView.getOrCreateBadge(R.id.messagesNavigationItem);        MenuItem notificationsItem = navigation.getMenu().getItem(3);        notificationsItem.setActionView(R.layout.menu_counter);        TextView notificationCounterTv = notificationsItem.getActionView().findViewById(R.id.counterTv);        MenuItem messagesItem = navigation.getMenu().getItem(2);        messagesItem.setActionView(R.layout.menu_counter);        TextView messagesCounterTv = messagesItem.getActionView().findViewById(R.id.counterTv);        Menu menu = navigation.getMenu();        SpannableString s = new SpannableString(menu.getItem(0).getTitle());        s.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0, s.length(), 0);        menu.getItem(0).setTitle(s);        SpannableString s2 = new SpannableString(menu.getItem(1).getTitle());        s2.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0, s2.length(), 0);        menu.getItem(1).setTitle(s2);        SpannableString s3 = new SpannableString(menu.getItem(2).getTitle());        s3.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0, s3.length(), 0);        menu.getItem(2).setTitle(s3);        SpannableString s4 = new SpannableString(menu.getItem(3).getTitle());        s4.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0, s4.length(), 0);        menu.getItem(3).setTitle(s4);        SpannableString s5 = new SpannableString(menu.getItem(4).getTitle());        s5.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0, s5.length(), 0);        menu.getItem(4).setTitle(s5);        SpannableString s6 = new SpannableString(menu.getItem(5).getTitle());        s6.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0, s6.length(), 0);        menu.getItem(5).setTitle(s6);        SpannableString s7 = new SpannableString(menu.getItem(6).getTitle());        s7.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), 0, s7.length(), 0);        menu.getItem(6).setTitle(s7);        CollectionReference notificationsRef = firestore.collection("notifications");        CollectionReference chatsRef = firestore.collection("chats");        String currentUserId = user.getUid();        List<String> savedMessagesNotifications = new ArrayList<>();        messagesCount = 0;        new Thread(() -> {            chatsRef.whereEqualTo("receiver", currentUserId).get().addOnSuccessListener(snapshots -> {                if (snapshots.getDocuments().size() == 0) {                    messagesCounterTv.setVisibility(View.GONE);                    messagingBadge.setVisible(false);                } else {                    messagesCounterTv.setVisibility(View.VISIBLE);                    messagingBadge.setVisible(true);                }                chatsRef.whereEqualTo("receiver", currentUserId).addSnapshotListener((snapshots2, e) -> {                    List<DocumentChange> documentChanges = snapshots2.getDocumentChanges();                    for (int i = 0; i < documentChanges.size(); i++) {                        QueryDocumentSnapshot document = documentChanges.get(i).getDocument();                        long unreadCount = ((List<String>) document.get("messages")).size() - document.getLong(currentUserId + ":LastSeenMessage");                        if (documentChanges.get(i).getType() == DocumentChange.Type.ADDED || documentChanges.get(i).getType() == DocumentChange.Type.MODIFIED) {                            if (unreadCount > 0) {                                if (!savedMessagesNotifications.contains(document.getId())) {                                    savedMessagesNotifications.add(document.getId());                                    messagesCount++;                                }                            } else {                                if (savedMessagesNotifications.contains(document.getId())) {                                    savedMessagesNotifications.remove(document.getId());                                    messagesCount--;                                }                            }                        } else if (documentChanges.get(i).getType() == DocumentChange.Type.REMOVED) {                            notificationsRef.whereEqualTo("receiverId", user.getUid())                                    .whereEqualTo("promoId", document.getLong("intendedpromoid"))                                    .whereEqualTo("type", "message").get().addOnSuccessListener(snapshots1 -> {                                if (!snapshots1.isEmpty()) {                                    notificationsRef.document(snapshots1.getDocuments().get(0).getId()).delete();                                }                            });                            if (unreadCount > 0) {                                savedMessagesNotifications.remove(document.getId());                                messagesCount--;                            }                        }                        if (i == documentChanges.size() - 1) {                            Log.d("ttt", "received message size: " + messagesCount);                            if (messagesCount == 0) {                                messagesCounterTv.setVisibility(View.GONE);                                messagingBadge.setVisible(false);                            } else {                                messagesCounterTv.setVisibility(View.VISIBLE);                                messagingBadge.setVisible(true);                                messagesCounterTv.setText(messagesCount + "");                            }                        }                    }                });            });            Query notificationQuery = notificationsRef.whereEqualTo("receiverId", user.getUid());            notificationQuery.get().addOnSuccessListener(snapshots -> {                if (snapshots.getDocuments().size() == 0) {                    notificationCounterTv.setVisibility(View.GONE);                    notificationBadge.setVisible(false);                } else {                    notificationCounterTv.setVisibility(View.VISIBLE);                    notificationBadge.setVisible(true);                }                notificationQuery.addSnapshotListener(new EventListener<QuerySnapshot>() {                    int count = 0;                    @Override                    public void onEvent(@Nullable QuerySnapshot snapshots, @Nullable FirebaseFirestoreException e) {                        List<DocumentChange> documentChanges = snapshots.getDocumentChanges();                        for (int i = 0; i < documentChanges.size(); i++) {                            if (documentChanges.get(i).getType() == DocumentChange.Type.ADDED) {                                count++;                            } else if (documentChanges.get(i).getType() == DocumentChange.Type.REMOVED) {                                count--;                            }                            if (i == documentChanges.size() - 1) {                                Log.d("ttt", "notification size: " + count);                                if (count == 0) {                                    notificationCounterTv.setVisibility(View.GONE);                                    notificationBadge.setVisible(false);                                } else {                                    notificationCounterTv.setText(count + "");                                    notificationCounterTv.setVisibility(View.VISIBLE);                                    notificationBadge.setVisible(true);                                }                            }                        }                    }                });            });            chatsRef.whereEqualTo("sender", currentUserId).get().addOnSuccessListener(snapshots -> {                if (snapshots.getDocuments().size() == 0) {                    messagesCounterTv.setVisibility(View.GONE);                    messagingBadge.setVisible(false);                } else {                    messagesCounterTv.setVisibility(View.VISIBLE);                    messagingBadge.setVisible(true);                }                chatsRef.whereEqualTo("sender", currentUserId).addSnapshotListener((snapshots1, e) -> {                    List<DocumentChange> documentChanges = snapshots1.getDocumentChanges();                    for (int i = 0; i < documentChanges.size(); i++) {                        QueryDocumentSnapshot document = documentChanges.get(i).getDocument();                        long unreadCount = ((List<String>) document.get("messages")).size() - document.getLong(currentUserId + ":LastSeenMessage");                        if (documentChanges.get(i).getType() == DocumentChange.Type.ADDED || documentChanges.get(i).getType() == DocumentChange.Type.MODIFIED) {                            if (unreadCount > 0) {                                if (!savedMessagesNotifications.contains(document.getId())) {                                    savedMessagesNotifications.add(document.getId());                                    messagesCount++;                                }                            } else {                                if (savedMessagesNotifications.contains(document.getId())) {                                    savedMessagesNotifications.remove(document.getId());                                    messagesCount--;                                }                            }                        } else if (documentChanges.get(i).getType() == DocumentChange.Type.REMOVED) {                            notificationsRef.whereEqualTo("receiverId", user.getUid())                                    .whereEqualTo("promoId", document.getLong("intendedpromoid"))                                    .whereEqualTo("type", "message").get().addOnSuccessListener(snapshots12 -> {                                if (!snapshots12.isEmpty()) {                                    notificationsRef.document(snapshots12.getDocuments().get(0).getId()).delete();                                }                            });                            if (unreadCount > 0) {                                savedMessagesNotifications.remove(document.getId());                                messagesCount--;                            }                        }                        if (i == documentChanges.size() - 1) {                            if (messagesCount == 0) {                                messagingBadge.setVisible(false);                                messagesCounterTv.setVisibility(View.GONE);                            } else {                                messagingBadge.setVisible(true);                                messagesCounterTv.setVisibility(View.VISIBLE);                                messagesCounterTv.setText(messagesCount + "");                            }                        }                    }                });            });        }).start();    }    public void changeStatusIcon(int drawableId) {        ((ImageView) navigation.getHeaderView(0).findViewById(R.id.statusImageView)).setImageDrawable(ContextCompat.getDrawable(getApplicationContext(), drawableId));    }    public void changeProfileImage(String url) {        Picasso.get().load(url).fit().into((ImageView) navigation.getHeaderView(0).findViewById(R.id.profile_image));        Picasso.get().load(url).fit().into((ImageView) findViewById(R.id.userImageIndicator));    }    public void openAccountSettingFragment() {        fragmentManager.beginTransaction().replace(R.id.homeFragmentContainer, new AccountSettingsFragment()).addToBackStack("AccountSettingsFragment").commit();    }    public void showDrawer() {        drawerLayout.openDrawer(GravityCompat.START);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == 3) {            newestPromosFragment.onRefresh();            if (fragmentManager.findFragmentByTag("myPromotionsFragment") != null) {                ((MyPromotionsFragment) fragmentManager.findFragmentByTag("myPromotionsFragment")).onRefresh();            }            if (fragmentManager.findFragmentByTag("userFragment") != null) {                ((UserFragment) fragmentManager.findFragmentByTag("userFragment")).onRefresh();            }        }    }//    public void refreshPromos() {//        newestPromosFragment.onRefresh();//    }    public void isFromUserFragment() {        if (fragmentManager.findFragmentByTag("userFragment") != null) {            ((UserFragment) fragmentManager.findFragmentByTag("userFragment")).onRefresh();        }    }    public void pauseVideo() {        if (newestPromosFragment.exoPlayer != null) {            newestPromosFragment.exoPlayer.setPlayWhenReady(false);        }    }    public void pauseVideoFromNewest() {        if (newestPromosFragment.exoPlayer != null) {            newestPromosFragment.exoPlayer.setPlayWhenReady(false);        }    }    public void showImageFullScreen(String imageUrl) {        Dialog imageDialog = new Dialog(HomeActivity.this);        imageDialog.setCanceledOnTouchOutside(true);        imageDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        imageDialog.setContentView(R.layout.full_screen_layout);        imageDialog.show();        Picasso.get().load(imageUrl).into((ImageView) imageDialog.findViewById(R.id.fillScreenTv));    }    void initializeTABS() {        HomeTabAdapter homeTabAdapter = new HomeTabAdapter(getSupportFragmentManager(), 0);        newestPromosFragment = new NewestPromosFragment();        homeTabAdapter.addFragment(createNewCategoryTab(new String[]{"سيارات"}), "سيارات");        homeTabAdapter.addFragment(createNewCategoryTab(new String[]{"عقارات"}), "عقارات");        homeTabAdapter.addFragment(createNewCategoryTab(new String[]{"موبيلات"}), "موبيلات");        homeTabAdapter.addFragment(createNewCategoryTab(new String[]{"الكترونيات","كمبيوتر و لاب توب"}), "الكترونيات");        homeTabAdapter.addFragment(createNewCategoryTab(new String[]{"أثاث"}), "أثاث");        homeTabAdapter.addFragment(newestPromosFragment, "جديد");        tabLayout = findViewById(R.id.tabLayout);        tabLayout.setupWithViewPager(viewPager);        viewPager.setAdapter(homeTabAdapter);        tabLayout.getTabAt(0).setIcon(R.drawable.car_icon_grey);        tabLayout.getTabAt(1).setIcon(R.drawable.home_icon_grey);        tabLayout.getTabAt(2).setIcon(R.drawable.mobile_icon_grey);        tabLayout.getTabAt(3).setIcon(R.drawable.pc_icon_grey);        tabLayout.getTabAt(4).setIcon(R.drawable.furnitue_icon_grey);        tabLayout.getTabAt(5).setIcon(R.drawable.flame_icon_grey);        tabLayout.selectTab(tabLayout.getTabAt(5));        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                if (position != 5) {                    pauseVideoFromNewest();                }                if(position != 5){//                    if(viewPager.getOffscreenPageLimit() < 5-position){//                        viewPager.setOffscreenPageLimit(5-position);//                    }                    if(!homeTabAdapter.savedTab.contains(position))homeTabAdapter.savedTab.add(position);                }            }            @Override            public void onPageScrollStateChanged(int state) {            }        });    }    void initializeConnectionListener() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {            cm = (ConnectivityManager) getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);            cm.registerDefaultNetworkCallback(networkCallback = new ConnectivityManager.NetworkCallback() {                @Override                public void onCapabilitiesChanged(@NonNull Network network, @NonNull NetworkCapabilities networkCapabilities) {                    super.onCapabilitiesChanged(network, networkCapabilities);                    GlobalVariables.setWifiIsOn(networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET));                }                @Override                public void onLost(@NonNull Network network) {                    super.onLost(network);                    GlobalVariables.setWifiIsOn(false);                    Log.d("ttt", "wifi offline from home");                }            });        }    }    @Override    protected void onDestroy() {        super.onDestroy();        GlobalVariables.getBlockedUsers().clear();        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            if (networkCallback != null) {                cm.unregisterNetworkCallback(networkCallback);            }        }    }    void getWindowSize() {        Point size = new Point();        getWindowManager().getDefaultDisplay().getSize(size);        GlobalVariables.setWindowHeight(size.y);        GlobalVariables.setWindowWidth(size.x);    }    CategoryPromotionsFragment createNewCategoryTab(String[] category) {        Bundle b = new Bundle();        b.putStringArray("category", category);        CategoryPromotionsFragment categoryPromotionsFragment = new CategoryPromotionsFragment();        categoryPromotionsFragment.setArguments(b);        return categoryPromotionsFragment;    }    void popAllBackstacks() {        fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);        bundles.clear();    }}